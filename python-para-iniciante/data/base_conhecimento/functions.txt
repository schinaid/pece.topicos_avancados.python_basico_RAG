As well as thewhilestatement just introduced, Python uses a few more
that we will encounter in this chapter.

while

if

Perhaps the most well-known statement type is theifstatement.  For
example:

if

>>>x=int(input("Please enter an integer: "))Please enter an integer: 42>>>ifx<0:...x=0...print('Negative changed to zero')...elifx==0:...print('Zero')...elifx==1:...print('Single')...else:...print('More')...More

There can be zero or moreelifparts, and theelsepart is
optional.  The keyword âelifâ is short for âelse ifâ, and is useful
to avoid excessive indentation.  Anifâ¦elifâ¦elifâ¦ sequence is a substitute for theswitchorcasestatements found in other languages.

elif

else

elif

if

elif

elif

switch

case

If youâre comparing the same value to several constants, or checking for specific types or
attributes, you may also find thematchstatement useful. For more
details seematch Statements.

match

for

Theforstatement in Python differs a bit from what you may be used
to in C or Pascal.  Rather than always iterating over an arithmetic progression
of numbers (like in Pascal), or giving the user the ability to define both the
iteration step and halting condition (as C), Pythonâsforstatement
iterates over the items of any sequence (a list or a string), in the order that
they appear in the sequence.  For example (no pun intended):

for

for

>>># Measure some strings:>>>words=['cat','window','defenestrate']>>>forwinwords:...print(w,len(w))...cat 3window 6defenestrate 12

Code that modifies a collection while iterating over that same collection can
be tricky to get right.  Instead, it is usually more straight-forward to loop
over a copy of the collection or to create a new collection:

# Create a sample collectionusers={'Hans':'active','ÃlÃ©onore':'inactive','æ¯å¤ªé':'active'}# Strategy:  Iterate over a copyforuser,statusinusers.copy().items():ifstatus=='inactive':delusers[user]# Strategy:  Create a new collectionactive_users={}foruser,statusinusers.items():ifstatus=='active':active_users[user]=status

range()

If you do need to iterate over a sequence of numbers, the built-in functionrange()comes in handy.  It generates arithmetic progressions:

range()

>>>foriinrange(5):...print(i)...01234

The given end point is never part of the generated sequence;range(10)generates
10 values, the legal indices for items of a sequence of length 10.  It
is possible to let the range start at another number, or to specify a different
increment (even negative; sometimes this is called the âstepâ):

range(10)

>>>list(range(5,10))[5, 6, 7, 8, 9]>>>list(range(0,10,3))[0, 3, 6, 9]>>>list(range(-10,-100,-30))[-10, -40, -70]

To iterate over the indices of a sequence, you can combinerange()andlen()as follows:

range()

len()

>>>a=['Mary','had','a','little','lamb']>>>foriinrange(len(a)):...print(i,a[i])...0 Mary1 had2 a3 little4 lamb

In most such cases, however, it is convenient to use theenumerate()function, seeLooping Techniques.

enumerate()

A strange thing happens if you just print a range:

>>>range(10)range(0, 10)

In many ways the object returned byrange()behaves as if it is a list,
but in fact it isnât. It is an object which returns the successive items of
the desired sequence when you iterate over it, but it doesnât really make
the list, thus saving space.

range()

We say such an object isiterable, that is, suitable as a target for
functions and constructs that expect something from which they can
obtain successive items until the supply is exhausted.  We have seen that
theforstatement is such a construct, while an example of a function
that takes an iterable issum():

for

sum()

>>>sum(range(4))# 0 + 1 + 2 + 36

Later we will see more functions that return iterables and take iterables as
arguments.  In chapterData Structures, we will discuss in more detail aboutlist().

list()

break

continue

Thebreakstatement breaks out of the innermost enclosingfororwhileloop:

break

for

while

>>>forninrange(2,10):...forxinrange(2,n):...ifn%x==0:...print(f"{n}equals{x}*{n//x}")...break...4 equals 2 * 26 equals 2 * 38 equals 2 * 49 equals 3 * 3

Thecontinuestatement continues with the next
iteration of the loop:

continue

>>>fornuminrange(2,10):...ifnum%2==0:...print(f"Found an even number{num}")...continue...print(f"Found an odd number{num}")...Found an even number 2Found an odd number 3Found an even number 4Found an odd number 5Found an even number 6Found an odd number 7Found an even number 8Found an odd number 9

else

In afororwhileloop thebreakstatement
may be paired with anelseclause.  If the loop finishes without
executing thebreak, theelseclause executes.

for

while

break

else

break

else

In aforloop, theelseclause is executed
after the loop finishes its final iteration, that is, if no break occurred.

for

else

In awhileloop, itâs executed after the loopâs condition becomes false.

while

In either kind of loop, theelseclause isnotexecuted if the
loop was terminated by abreak.  Of course, other ways of ending the
loop early, such as areturnor a raised exception, will also skip
execution of theelseclause.

else

break

return

else

This is exemplified in the followingforloop,
which searches for prime numbers:

for

>>>forninrange(2,10):...forxinrange(2,n):...ifn%x==0:...print(n,'equals',x,'*',n//x)...break...else:...# loop fell through without finding a factor...print(n,'is a prime number')...2 is a prime number3 is a prime number4 equals 2 * 25 is a prime number6 equals 2 * 37 is a prime number8 equals 2 * 49 equals 3 * 3

(Yes, this is the correct code.  Look closely: theelseclause belongs to
theforloop,nottheifstatement.)

else

for

if

One way to think of the else clause is to imagine it paired with theifinside the loop.  As the loop executes, it will run a sequence like
if/if/if/else. Theifis inside the loop, encountered a number of times. If
the condition is ever true, abreakwill happen. If the condition is never
true, theelseclause outside the loop will execute.

if

if

break

else

When used with a loop, theelseclause has more in common with theelseclause of atrystatement than it does with that ofifstatements: atrystatementâselseclause runs when no exception
occurs, and a loopâselseclause runs when nobreakoccurs. For more on
thetrystatement and exceptions, seeHandling Exceptions.

else

else

try

if

try

else

else

break

try

pass

Thepassstatement does nothing. It can be used when a statement is
required syntactically but the program requires no action. For example:

pass

>>>whileTrue:...pass# Busy-wait for keyboard interrupt (Ctrl+C)...

This is commonly used for creating minimal classes:

>>>classMyEmptyClass:...pass...

Another placepasscan be used is as a place-holder for a function or
conditional body when you are working on new code, allowing you to keep thinking
at a more abstract level.  Thepassis silently ignored:

pass

pass

>>>definitlog(*args):...pass# Remember to implement this!...

match

Amatchstatement takes an expression and compares its value to successive
patterns given as one or more case blocks.  This is superficially
similar to a switch statement in C, Java or JavaScript (and many
other languages), but itâs more similar to pattern matching in
languages like Rust or Haskell. Only the first pattern that matches
gets executed and it can also extract components (sequence elements
or object attributes) from the value into variables.

match

The simplest form compares a subject value against one or more literals:

defhttp_error(status):matchstatus:case400:return"Bad request"case404:return"Not found"case418:return"I'm a teapot"case_:return"Something's wrong with the internet"

Note the last block: the âvariable nameâ_acts as awildcardand
never fails to match. If no case matches, none of the branches is executed.

_

You can combine several literals in a single pattern using|(âorâ):

|

case401|403|404:return"Not allowed"

Patterns can look like unpacking assignments, and can be used to bind
variables:

# point is an (x, y) tuplematchpoint:case(0,0):print("Origin")case(0,y):print(f"Y={y}")case(x,0):print(f"X={x}")case(x,y):print(f"X={x}, Y={y}")case_:raiseValueError("Not a point")

Study that one carefully!  The first pattern has two literals, and can
be thought of as an extension of the literal pattern shown above.  But
the next two patterns combine a literal and a variable, and the
variablebindsa value from the subject (point).  The fourth
pattern captures two values, which makes it conceptually similar to
the unpacking assignment(x,y)=point.

point

(x,y)=point

If you are using classes to structure your data
you can use the class name followed by an argument list resembling a
constructor, but with the ability to capture attributes into variables:

classPoint:def__init__(self,x,y):self.x=xself.y=ydefwhere_is(point):matchpoint:casePoint(x=0,y=0):print("Origin")casePoint(x=0,y=y):print(f"Y={y}")casePoint(x=x,y=0):print(f"X={x}")casePoint():print("Somewhere else")case_:print("Not a point")

You can use positional parameters with some builtin classes that provide an
ordering for their attributes (e.g. dataclasses). You can also define a specific
position for attributes in patterns by setting the__match_args__special
attribute in your classes. If itâs set to (âxâ, âyâ), the following patterns are all
equivalent (and all bind theyattribute to thevarvariable):

__match_args__

y

var

Point(1,var)Point(1,y=var)Point(x=1,y=var)Point(y=var,x=1)

A recommended way to read patterns is to look at them as an extended form of what you
would put on the left of an assignment, to understand which variables would be set to
what.
Only the standalone names (likevarabove) are assigned to by a match statement.
Dotted names (likefoo.bar), attribute names (thex=andy=above) or class names
(recognized by the â(â¦)â next to them likePointabove) are never assigned to.

var

foo.bar

x=

y=

Point

Patterns can be arbitrarily nested.  For example, if we have a short
list of Points, with__match_args__added, we could match it like this:

__match_args__

classPoint:__match_args__=('x','y')def__init__(self,x,y):self.x=xself.y=ymatchpoints:case[]:print("No points")case[Point(0,0)]:print("The origin")case[Point(x,y)]:print(f"Single point{x},{y}")case[Point(0,y1),Point(0,y2)]:print(f"Two on the Y axis at{y1},{y2}")case_:print("Something else")

We can add anifclause to a pattern, known as a âguardâ.  If the
guard is false,matchgoes on to try the next case block.  Note
that value capture happens before the guard is evaluated:

if

match

matchpoint:casePoint(x,y)ifx==y:print(f"Y=X at{x}")casePoint(x,y):print(f"Not on the diagonal")

Several other key features of this statement:

Like unpacking assignments, tuple and list patterns have exactly the
same meaning and actually match arbitrary sequences.  An important
exception is that they donât match iterators or strings.Sequence patterns support extended unpacking:[x,y,*rest]and(x,y,*rest)work similar to unpacking assignments.  The
name after*may also be_, so(x,y,*_)matches a sequence
of at least two items without binding the remaining items.Mapping patterns:{"bandwidth":b,"latency":l}captures the"bandwidth"and"latency"values from a dictionary.  Unlike sequence
patterns, extra keys are ignored.  An unpacking like**restis also
supported.  (But**_would be redundant, so it is not allowed.)Subpatterns may be captured using theaskeyword:case(Point(x1,y1),Point(x2,y2)asp2):...will capture the second element of the input asp2(as long as the input is
a sequence of two points)Most literals are compared by equality, however the singletonsTrue,FalseandNoneare compared by identity.Patterns may use named constants.  These must be dotted names
to prevent them from being interpreted as capture variable:fromenumimportEnumclassColor(Enum):RED='red'GREEN='green'BLUE='blue'color=Color(input("Enter your choice of 'red', 'blue' or 'green': "))matchcolor:caseColor.RED:print("I see red!")caseColor.GREEN:print("Grass is green")caseColor.BLUE:print("I'm feeling the blues :(")

Like unpacking assignments, tuple and list patterns have exactly the
same meaning and actually match arbitrary sequences.  An important
exception is that they donât match iterators or strings.

Like unpacking assignments, tuple and list patterns have exactly the
same meaning and actually match arbitrary sequences.  An important
exception is that they donât match iterators or strings.

Sequence patterns support extended unpacking:[x,y,*rest]and(x,y,*rest)work similar to unpacking assignments.  The
name after*may also be_, so(x,y,*_)matches a sequence
of at least two items without binding the remaining items.

Sequence patterns support extended unpacking:[x,y,*rest]and(x,y,*rest)work similar to unpacking assignments.  The
name after*may also be_, so(x,y,*_)matches a sequence
of at least two items without binding the remaining items.

[x,y,*rest]

(x,y,*rest)

*

_

(x,y,*_)

Mapping patterns:{"bandwidth":b,"latency":l}captures the"bandwidth"and"latency"values from a dictionary.  Unlike sequence
patterns, extra keys are ignored.  An unpacking like**restis also
supported.  (But**_would be redundant, so it is not allowed.)

Mapping patterns:{"bandwidth":b,"latency":l}captures the"bandwidth"and"latency"values from a dictionary.  Unlike sequence
patterns, extra keys are ignored.  An unpacking like**restis also
supported.  (But**_would be redundant, so it is not allowed.)

{"bandwidth":b,"latency":l}

"bandwidth"

"latency"

**rest

**_

Subpatterns may be captured using theaskeyword:case(Point(x1,y1),Point(x2,y2)asp2):...will capture the second element of the input asp2(as long as the input is
a sequence of two points)

Subpatterns may be captured using theaskeyword:

as

case(Point(x1,y1),Point(x2,y2)asp2):...

will capture the second element of the input asp2(as long as the input is
a sequence of two points)

p2

Most literals are compared by equality, however the singletonsTrue,FalseandNoneare compared by identity.

Most literals are compared by equality, however the singletonsTrue,FalseandNoneare compared by identity.

True

False

None

Patterns may use named constants.  These must be dotted names
to prevent them from being interpreted as capture variable:fromenumimportEnumclassColor(Enum):RED='red'GREEN='green'BLUE='blue'color=Color(input("Enter your choice of 'red', 'blue' or 'green': "))matchcolor:caseColor.RED:print("I see red!")caseColor.GREEN:print("Grass is green")caseColor.BLUE:print("I'm feeling the blues :(")

Patterns may use named constants.  These must be dotted names
to prevent them from being interpreted as capture variable:

fromenumimportEnumclassColor(Enum):RED='red'GREEN='green'BLUE='blue'color=Color(input("Enter your choice of 'red', 'blue' or 'green': "))matchcolor:caseColor.RED:print("I see red!")caseColor.GREEN:print("Grass is green")caseColor.BLUE:print("I'm feeling the blues :(")

For a more detailed explanation and additional examples, you can look intoPEP 636which is written in a tutorial format.

We can create a function that writes the Fibonacci series to an arbitrary
boundary:

>>>deffib(n):# write Fibonacci series less than n..."""Print a Fibonacci series less than n."""...a,b=0,1...whilea<n:...print(a,end=' ')...a,b=b,a+b...print()...>>># Now call the function we just defined:>>>fib(2000)0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597

The keyworddefintroduces a functiondefinition.  It must be
followed by the function name and the parenthesized list of formal parameters.
The statements that form the body of the function start at the next line, and
must be indented.

def

The first statement of the function body can optionally be a string literal;
this string literal is the functionâs documentation string, ordocstring.
(More about docstrings can be found in the sectionDocumentation Strings.)
There are tools which use docstrings to automatically produce online or printed
documentation, or to let the user interactively browse through code; itâs good
practice to include docstrings in code that you write, so make a habit of it.

Theexecutionof a function introduces a new symbol table used for the local
variables of the function.  More precisely, all variable assignments in a
function store the value in the local symbol table; whereas variable references
first look in the local symbol table, then in the local symbol tables of
enclosing functions, then in the global symbol table, and finally in the table
of built-in names. Thus, global variables and variables of enclosing functions
cannot be directly assigned a value within a function (unless, for global
variables, named in aglobalstatement, or, for variables of enclosing
functions, named in anonlocalstatement), although they may be
referenced.

global

nonlocal

The actual parameters (arguments) to a function call are introduced in the local
symbol table of the called function when it is called; thus, arguments are
passed usingcall by value(where thevalueis always an objectreference,
not the value of the object).[1]When a function calls another function,
or calls itself recursively, a new
local symbol table is created for that call.

A function definition associates the function name with the function object in
the current symbol table.  The interpreter recognizes the object pointed to by
that name as a user-defined function.  Other names can also point to that same
function object and can also be used to access the function:

>>>fib<function fib at 10042ed0>>>>f=fib>>>f(100)0 1 1 2 3 5 8 13 21 34 55 89

Coming from other languages, you might object thatfibis not a function but
a procedure since it doesnât return a value.  In fact, even functions without areturnstatement do return a value, albeit a rather boring one.  This
value is calledNone(itâs a built-in name).  Writing the valueNoneis
normally suppressed by the interpreter if it would be the only value written.
You can see it if you really want to usingprint():

fib

return

None

None

print()

>>>fib(0)>>>print(fib(0))None

It is simple to write a function that returns a list of the numbers of the
Fibonacci series, instead of printing it:

>>>deffib2(n):# return Fibonacci series up to n..."""Return a list containing the Fibonacci series up to n."""...result=[]...a,b=0,1...whilea<n:...result.append(a)# see below...a,b=b,a+b...returnresult...>>>f100=fib2(100)# call it>>>f100# write the result[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

This example, as usual, demonstrates some new Python features:

Thereturnstatement returns with a value from a function.returnwithout an expression argument returnsNone. Falling off
the end of a function also returnsNone.The statementresult.append(a)calls amethodof the list objectresult.  A method is a function that âbelongsâ to an object and is namedobj.methodname, whereobjis some object (this may be an expression),
andmethodnameis the name of a method that is defined by the objectâs type.
Different types define different methods.  Methods of different types may have
the same name without causing ambiguity.  (It is possible to define your own
object types and methods, usingclasses, seeClasses)
The methodappend()shown in the example is defined for list objects; it
adds a new element at the end of the list.  In this example it is equivalent toresult=result+[a], but more efficient.

Thereturnstatement returns with a value from a function.returnwithout an expression argument returnsNone. Falling off
the end of a function also returnsNone.

Thereturnstatement returns with a value from a function.returnwithout an expression argument returnsNone. Falling off
the end of a function also returnsNone.

return

return

None

None

The statementresult.append(a)calls amethodof the list objectresult.  A method is a function that âbelongsâ to an object and is namedobj.methodname, whereobjis some object (this may be an expression),
andmethodnameis the name of a method that is defined by the objectâs type.
Different types define different methods.  Methods of different types may have
the same name without causing ambiguity.  (It is possible to define your own
object types and methods, usingclasses, seeClasses)
The methodappend()shown in the example is defined for list objects; it
adds a new element at the end of the list.  In this example it is equivalent toresult=result+[a], but more efficient.

The statementresult.append(a)calls amethodof the list objectresult.  A method is a function that âbelongsâ to an object and is namedobj.methodname, whereobjis some object (this may be an expression),
andmethodnameis the name of a method that is defined by the objectâs type.
Different types define different methods.  Methods of different types may have
the same name without causing ambiguity.  (It is possible to define your own
object types and methods, usingclasses, seeClasses)
The methodappend()shown in the example is defined for list objects; it
adds a new element at the end of the list.  In this example it is equivalent toresult=result+[a], but more efficient.

result.append(a)

result

obj.methodname

obj

methodname

append()

result=result+[a]

It is also possible to define functions with a variable number of arguments.
There are three forms, which can be combined.

The most useful form is to specify a default value for one or more arguments.
This creates a function that can be called with fewer arguments than it is
defined to allow.  For example:

defask_ok(prompt,retries=4,reminder='Please try again!'):whileTrue:reply=input(prompt)ifreplyin{'y','ye','yes'}:returnTrueifreplyin{'n','no','nop','nope'}:returnFalseretries=retries-1ifretries<0:raiseValueError('invalid user response')print(reminder)

This function can be called in several ways:

giving only the mandatory argument:ask_ok('Doyoureallywanttoquit?')giving one of the optional arguments:ask_ok('OKtooverwritethefile?',2)or even giving all arguments:ask_ok('OKtooverwritethefile?',2,'Comeon,onlyyesorno!')

giving only the mandatory argument:ask_ok('Doyoureallywanttoquit?')

giving only the mandatory argument:ask_ok('Doyoureallywanttoquit?')

ask_ok('Doyoureallywanttoquit?')

giving one of the optional arguments:ask_ok('OKtooverwritethefile?',2)

giving one of the optional arguments:ask_ok('OKtooverwritethefile?',2)

ask_ok('OKtooverwritethefile?',2)

or even giving all arguments:ask_ok('OKtooverwritethefile?',2,'Comeon,onlyyesorno!')

or even giving all arguments:ask_ok('OKtooverwritethefile?',2,'Comeon,onlyyesorno!')

ask_ok('OKtooverwritethefile?',2,'Comeon,onlyyesorno!')

This example also introduces theinkeyword. This tests whether or
not a sequence contains a certain value.

in

The default values are evaluated at the point of function definition in thedefiningscope, so that

i=5deff(arg=i):print(arg)i=6f()

will print5.

5

Important warning:The default value is evaluated only once. This makes a
difference when the default is a mutable object such as a list, dictionary, or
instances of most classes.  For example, the following function accumulates the
arguments passed to it on subsequent calls:

deff(a,L=[]):L.append(a)returnLprint(f(1))print(f(2))print(f(3))

This will print

[1][1,2][1,2,3]

If you donât want the default to be shared between subsequent calls, you can
write the function like this instead:

deff(a,L=None):ifLisNone:L=[]L.append(a)returnL

Functions can also be called usingkeyword argumentsof the formkwarg=value.  For instance, the following function:

kwarg=value

defparrot(voltage,state='a stiff',action='voom',type='Norwegian Blue'):print("-- This parrot wouldn't",action,end=' ')print("if you put",voltage,"volts through it.")print("-- Lovely plumage, the",type)print("-- It's",state,"!")

accepts one required argument (voltage) and three optional arguments
(state,action, andtype).  This function can be called in any
of the following ways:

voltage

state

action

type

parrot(1000)# 1 positional argumentparrot(voltage=1000)# 1 keyword argumentparrot(voltage=1000000,action='VOOOOOM')# 2 keyword argumentsparrot(action='VOOOOOM',voltage=1000000)# 2 keyword argumentsparrot('a million','bereft of life','jump')# 3 positional argumentsparrot('a thousand',state='pushing up the daisies')# 1 positional, 1 keyword

but all the following calls would be invalid:

parrot()# required argument missingparrot(voltage=5.0,'dead')# non-keyword argument after a keyword argumentparrot(110,voltage=220)# duplicate value for the same argumentparrot(actor='John Cleese')# unknown keyword argument

In a function call, keyword arguments must follow positional arguments.
All the keyword arguments passed must match one of the arguments
accepted by the function (e.g.actoris not a valid argument for theparrotfunction), and their order is not important.  This also includes
non-optional arguments (e.g.parrot(voltage=1000)is valid too).
No argument may receive a value more than once.
Hereâs an example that fails due to this restriction:

actor

parrot

parrot(voltage=1000)

>>>deffunction(a):...pass...>>>function(0,a=0)Traceback (most recent call last):File"<stdin>", line1, in<module>TypeError:function() got multiple values for argument 'a'

When a final formal parameter of the form**nameis present, it receives a
dictionary (seeMapping Types â dict) containing all keyword arguments except for
those corresponding to a formal parameter.  This may be combined with a formal
parameter of the form*name(described in the next subsection) which
receives atuplecontaining the positional
arguments beyond the formal parameter list.  (*namemust occur
before**name.) For example, if we define a function like this:

**name

*name

*name

**name

defcheeseshop(kind,*arguments,**keywords):print("-- Do you have any",kind,"?")print("-- I'm sorry, we're all out of",kind)forarginarguments:print(arg)print("-"*40)forkwinkeywords:print(kw,":",keywords[kw])

It could be called like this:

cheeseshop("Limburger","It's very runny, sir.","It's really very, VERY runny, sir.",shopkeeper="Michael Palin",client="John Cleese",sketch="Cheese Shop Sketch")

and of course it would print:

-- Do you have any Limburger ?
-- I'm sorry, we're all out of Limburger
It's very runny, sir.
It's really very, VERY runny, sir.
----------------------------------------
shopkeeper : Michael Palin
client : John Cleese
sketch : Cheese Shop Sketch

Note that the order in which the keyword arguments are printed is guaranteed
to match the order in which they were provided in the function call.

By default, arguments may be passed to a Python function either by position
or explicitly by keyword. For readability and performance, it makes sense to
restrict the way arguments can be passed so that a developer need only look
at the function definition to determine if items are passed by position, by
position or keyword, or by keyword.

A function definition may look like:

def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):
      -----------    ----------     ----------
        |             |                  |
        |        Positional or keyword   |
        |                                - Keyword only
         -- Positional only

where/and*are optional. If used, these symbols indicate the kind of
parameter by how the arguments may be passed to the function:
positional-only, positional-or-keyword, and keyword-only. Keyword parameters
are also referred to as named parameters.

/

*

If/and*are not present in the function definition, arguments may
be passed to a function by position or by keyword.

/

*

Looking at this in a bit more detail, it is possible to mark certain parameters
aspositional-only. Ifpositional-only, the parametersâ order matters, and
the parameters cannot be passed by keyword. Positional-only parameters are
placed before a/(forward-slash). The/is used to logically
separate the positional-only parameters from the rest of the parameters.
If there is no/in the function definition, there are no positional-only
parameters.

/

/

/

Parameters following the/may bepositional-or-keywordorkeyword-only.

/

To mark parameters askeyword-only, indicating the parameters must be passed
by keyword argument, place an*in the arguments list just before the firstkeyword-onlyparameter.

*

Consider the following example function definitions paying close attention to the
markers/and*:

/

*

>>>defstandard_arg(arg):...print(arg)...>>>defpos_only_arg(arg,/):...print(arg)...>>>defkwd_only_arg(*,arg):...print(arg)...>>>defcombined_example(pos_only,/,standard,*,kwd_only):...print(pos_only,standard,kwd_only)

The first function definition,standard_arg, the most familiar form,
places no restrictions on the calling convention and arguments may be
passed by position or keyword:

standard_arg

>>>standard_arg(2)2>>>standard_arg(arg=2)2

The second functionpos_only_argis restricted to only use positional
parameters as there is a/in the function definition:

pos_only_arg

/

>>>pos_only_arg(1)1>>>pos_only_arg(arg=1)Traceback (most recent call last):File"<stdin>", line1, in<module>TypeError:pos_only_arg() got some positional-only arguments passed as keyword arguments: 'arg'

The third functionkwd_only_argonly allows keyword arguments as indicated
by a*in the function definition:

kwd_only_arg

*

>>>kwd_only_arg(3)Traceback (most recent call last):File"<stdin>", line1, in<module>TypeError:kwd_only_arg() takes 0 positional arguments but 1 was given>>>kwd_only_arg(arg=3)3

And the last uses all three calling conventions in the same function
definition:

>>>combined_example(1,2,3)Traceback (most recent call last):File"<stdin>", line1, in<module>TypeError:combined_example() takes 2 positional arguments but 3 were given>>>combined_example(1,2,kwd_only=3)1 2 3>>>combined_example(1,standard=2,kwd_only=3)1 2 3>>>combined_example(pos_only=1,standard=2,kwd_only=3)Traceback (most recent call last):File"<stdin>", line1, in<module>TypeError:combined_example() got some positional-only arguments passed as keyword arguments: 'pos_only'

Finally, consider this function definition which has a potential collision between the positional argumentnameand**kwdswhich hasnameas a key:

name

**kwds

name

deffoo(name,**kwds):return'name'inkwds

There is no possible call that will make it returnTrueas the keyword'name'will always bind to the first parameter. For example:

True

'name'

>>>foo(1,**{'name':2})Traceback (most recent call last):File"<stdin>", line1, in<module>TypeError:foo() got multiple values for argument 'name'>>>

But using/(positional only arguments), it is possible since it allowsnameas a positional argument and'name'as a key in the keyword arguments:

/

name

'name'

>>>deffoo(name,/,**kwds):...return'name'inkwds...>>>foo(1,**{'name':2})True

In other words, the names of positional-only parameters can be used in**kwdswithout ambiguity.

**kwds

The use case will determine which parameters to use in the function definition:

deff(pos1,pos2,/,pos_or_kwd,*,kwd1,kwd2):

As guidance:

Use positional-only if you want the name of the parameters to not be
available to the user. This is useful when parameter names have no real
meaning, if you want to enforce the order of the arguments when the function
is called or if you need to take some positional parameters and arbitrary
keywords.Use keyword-only when names have meaning and the function definition is
more understandable by being explicit with names or you want to prevent
users relying on the position of the argument being passed.For an API, use positional-only to prevent breaking API changes
if the parameterâs name is modified in the future.

Use positional-only if you want the name of the parameters to not be
available to the user. This is useful when parameter names have no real
meaning, if you want to enforce the order of the arguments when the function
is called or if you need to take some positional parameters and arbitrary
keywords.

Use positional-only if you want the name of the parameters to not be
available to the user. This is useful when parameter names have no real
meaning, if you want to enforce the order of the arguments when the function
is called or if you need to take some positional parameters and arbitrary
keywords.

Use keyword-only when names have meaning and the function definition is
more understandable by being explicit with names or you want to prevent
users relying on the position of the argument being passed.

Use keyword-only when names have meaning and the function definition is
more understandable by being explicit with names or you want to prevent
users relying on the position of the argument being passed.

For an API, use positional-only to prevent breaking API changes
if the parameterâs name is modified in the future.

For an API, use positional-only to prevent breaking API changes
if the parameterâs name is modified in the future.

Finally, the least frequently used option is to specify that a function can be
called with an arbitrary number of arguments.  These arguments will be wrapped
up in a tuple (seeTuples and Sequences).  Before the variable number of arguments,
zero or more normal arguments may occur.

defwrite_multiple_items(file,separator,*args):file.write(separator.join(args))

Normally, thesevariadicarguments will be last in the list of formal
parameters, because they scoop up all remaining input arguments that are
passed to the function. Any formal parameters which occur after the*argsparameter are âkeyword-onlyâ arguments, meaning that they can only be used as
keywords rather than positional arguments.

*args

>>>defconcat(*args,sep="/"):...returnsep.join(args)...>>>concat("earth","mars","venus")'earth/mars/venus'>>>concat("earth","mars","venus",sep=".")'earth.mars.venus'

The reverse situation occurs when the arguments are already in a list or tuple
but need to be unpacked for a function call requiring separate positional
arguments.  For instance, the built-inrange()function expects separatestartandstoparguments.  If they are not available separately, write the
function call with the*-operator to unpack the arguments out of a list
or tuple:

range()

*

>>>list(range(3,6))# normal call with separate arguments[3, 4, 5]>>>args=[3,6]>>>list(range(*args))# call with arguments unpacked from a list[3, 4, 5]

In the same fashion, dictionaries can deliver keyword arguments with the**-operator:

**

>>>defparrot(voltage,state='a stiff',action='voom'):...print("-- This parrot wouldn't",action,end=' ')...print("if you put",voltage,"volts through it.",end=' ')...print("E's",state,"!")...>>>d={"voltage":"four million","state":"bleedin' demised","action":"VOOM"}>>>parrot(**d)-- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !

Small anonymous functions can be created with thelambdakeyword.
This function returns the sum of its two arguments:lambdaa,b:a+b.
Lambda functions can be used wherever function objects are required.  They are
syntactically restricted to a single expression.  Semantically, they are just
syntactic sugar for a normal function definition.  Like nested function
definitions, lambda functions can reference variables from the containing
scope:

lambda

lambdaa,b:a+b

>>>defmake_incrementor(n):...returnlambdax:x+n...>>>f=make_incrementor(42)>>>f(0)42>>>f(1)43

The above example uses a lambda expression to return a function.  Another use
is to pass a small function as an argument.  For instance,list.sort()takes a sorting key functionkeywhich can be a lambda function:

list.sort()

>>>pairs=[(1,'one'),(2,'two'),(3,'three'),(4,'four')]>>>pairs.sort(key=lambdapair:pair[1])>>>pairs[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]

Here are some conventions about the content and formatting of documentation
strings.

The first line should always be a short, concise summary of the objectâs
purpose.  For brevity, it should not explicitly state the objectâs name or type,
since these are available by other means (except if the name happens to be a
verb describing a functionâs operation).  This line should begin with a capital
letter and end with a period.

If there are more lines in the documentation string, the second line should be
blank, visually separating the summary from the rest of the description.  The
following lines should be one or more paragraphs describing the objectâs calling
conventions, its side effects, etc.

The Python parser does not strip indentation from multi-line string literals in
Python, so tools that process documentation have to strip indentation if
desired.  This is done using the following convention. The first non-blank lineafterthe first line of the string determines the amount of indentation for
the entire documentation string.  (We canât use the first line since it is
generally adjacent to the stringâs opening quotes so its indentation is not
apparent in the string literal.)  Whitespace âequivalentâ to this indentation is
then stripped from the start of all lines of the string.  Lines that are
indented less should not occur, but if they occur all their leading whitespace
should be stripped.  Equivalence of whitespace should be tested after expansion
of tabs (to 8 spaces, normally).

Here is an example of a multi-line docstring:

>>>defmy_function():..."""Do nothing, but document it.......No, really, it doesn't do anything...."""...pass...>>>print(my_function.__doc__)Do nothing, but document it.No, really, it doesn't do anything.

Function annotationsare completely optional metadata
information about the types used by user-defined functions (seePEP 3107andPEP 484for more information).

Annotationsare stored in the__annotations__attribute of the function as a dictionary and have no effect on any other part of the
function.  Parameter annotations are defined by a colon after the parameter name, followed
by an expression evaluating to the value of the annotation.  Return annotations are
defined by a literal->, followed by an expression, between the parameter
list and the colon denoting the end of thedefstatement.  The
following example has a required argument, an optional argument, and the return
value annotated:

__annotations__

->

def

>>>deff(ham:str,eggs:str='eggs')->str:...print("Annotations:",f.__annotations__)...print("Arguments:",ham,eggs)...returnham+' and '+eggs...>>>f('spam')Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}Arguments: spam eggs'spam and eggs'

Now that you are about to write longer, more complex pieces of Python, it is a
good time to talk aboutcoding style.  Most languages can be written (or more
concise,formatted) in different styles; some are more readable than others.
Making it easy for others to read your code is always a good idea, and adopting
a nice coding style helps tremendously for that.

For Python,PEP 8has emerged as the style guide that most projects adhere to;
it promotes a very readable and eye-pleasing coding style.  Every Python
developer should read it at some point; here are the most important points
extracted for you:

Use 4-space indentation, and no tabs.4 spaces are a good compromise between small indentation (allows greater
nesting depth) and large indentation (easier to read).  Tabs introduce
confusion, and are best left out.Wrap lines so that they donât exceed 79 characters.This helps users with small displays and makes it possible to have several
code files side-by-side on larger displays.Use blank lines to separate functions and classes, and larger blocks of
code inside functions.When possible, put comments on a line of their own.Use docstrings.Use spaces around operators and after commas, but not directly inside
bracketing constructs:a=f(1,2)+g(3,4).Name your classes and functions consistently; the convention is to useUpperCamelCasefor classes andlowercase_with_underscoresfor functions
and methods.  Always useselfas the name for the first method argument
(seeA First Look at Classesfor more on classes and methods).Donât use fancy encodings if your code is meant to be used in international
environments.  Pythonâs default, UTF-8, or even plain ASCII work best in any
case.Likewise, donât use non-ASCII characters in identifiers if there is only the
slightest chance people speaking a different language will read or maintain
the code.

Use 4-space indentation, and no tabs.4 spaces are a good compromise between small indentation (allows greater
nesting depth) and large indentation (easier to read).  Tabs introduce
confusion, and are best left out.

Use 4-space indentation, and no tabs.

4 spaces are a good compromise between small indentation (allows greater
nesting depth) and large indentation (easier to read).  Tabs introduce
confusion, and are best left out.

Wrap lines so that they donât exceed 79 characters.This helps users with small displays and makes it possible to have several
code files side-by-side on larger displays.

Wrap lines so that they donât exceed 79 characters.

This helps users with small displays and makes it possible to have several
code files side-by-side on larger displays.

Use blank lines to separate functions and classes, and larger blocks of
code inside functions.

Use blank lines to separate functions and classes, and larger blocks of
code inside functions.

When possible, put comments on a line of their own.

When possible, put comments on a line of their own.

Use docstrings.

Use docstrings.

Use spaces around operators and after commas, but not directly inside
bracketing constructs:a=f(1,2)+g(3,4).

Use spaces around operators and after commas, but not directly inside
bracketing constructs:a=f(1,2)+g(3,4).

a=f(1,2)+g(3,4)

Name your classes and functions consistently; the convention is to useUpperCamelCasefor classes andlowercase_with_underscoresfor functions
and methods.  Always useselfas the name for the first method argument
(seeA First Look at Classesfor more on classes and methods).

Name your classes and functions consistently; the convention is to useUpperCamelCasefor classes andlowercase_with_underscoresfor functions
and methods.  Always useselfas the name for the first method argument
(seeA First Look at Classesfor more on classes and methods).

UpperCamelCase

lowercase_with_underscores

self

Donât use fancy encodings if your code is meant to be used in international
environments.  Pythonâs default, UTF-8, or even plain ASCII work best in any
case.

Donât use fancy encodings if your code is meant to be used in international
environments.  Pythonâs default, UTF-8, or even plain ASCII work best in any
case.

Likewise, donât use non-ASCII characters in identifiers if there is only the
slightest chance people speaking a different language will read or maintain
the code.

Likewise, donât use non-ASCII characters in identifiers if there is only the
slightest chance people speaking a different language will read or maintain
the code.

Footnotes

Actually,call by object referencewould be a better description,
since if a mutable object is passed, the caller will see any changes the
callee makes to it (items inserted into a list).